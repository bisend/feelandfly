<?php
/**
 * Created by PhpStorm.
 * User: vlad_
 * Date: 14.12.2017
 * Time: 12:47
 */

namespace App\Services;

use App\Repositories\CategoryRepository;
use App\Repositories\DeliveryRepository;
use App\Repositories\OrderProductRepository;
use App\Repositories\OrderRepository;
use App\Repositories\PaymentRepository;
use App\Repositories\ProductRepository;
use App\Repositories\ProfileRepository;
use App\Repositories\UserRepository;
use App\Repositories\WishListProductRepository;

class ProfileService extends LayoutService
{
    protected $userRepository;
    
    protected $profileRepository;
    
    protected $paymentRepository;
    
    protected $deliveryRepository;

    protected $wishListProductRepository;

    protected $productRepository;

    protected $orderRepository;
    
    protected $orderProductRepository;
    
    public function __construct(CategoryRepository $categoryRepository, 
                                UserRepository $userRepository, 
                                ProfileRepository $profileRepository,
                                PaymentRepository $paymentRepository,
                                DeliveryRepository $deliveryRepository,
                                WishListProductRepository $wishListProductRepository,
                                ProductRepository $productRepository,
                                OrderRepository $orderRepository,
                                OrderProductRepository $orderProductRepository)
    {
        parent::__construct($categoryRepository);
        
        $this->userRepository = $userRepository;
        
        $this->profileRepository = $profileRepository;
        
        $this->paymentRepository = $paymentRepository;
        
        $this->deliveryRepository = $deliveryRepository;

        $this->wishListProductRepository = $wishListProductRepository;

        $this->productRepository = $productRepository;

        $this->orderRepository = $orderRepository;
        
        $this->orderProductRepository = $orderProductRepository;
    }
    
    public function fill($model)
    {
        parent::fill($model); // TODO: Change the autogenerated stub
    }
    
    public function saveUserName($userId, $name)
    {
        $this->userRepository->saveUserName($userId, $name);
    }
    
    public function saveProfilePhoneNumber($userId, $phone)
    {
        $this->profileRepository->saveProfilePhoneNumber($userId, $phone);
    }

    public function checkIfEmailChanged($userId, $email)
    {
        return $this->userRepository->checkIfEmailChanged($userId, $email);
    }

    public function checkIfNewEmailValid($email)
    {
        return $this->userRepository->checkIfNewEmailValid($email);
    }

    public function saveNewEmail($userId, $email)
    {
        $this->userRepository->saveNewEmail($userId, $email);
    }
    
    public function changePassword($userId, $newPassword)
    {
        $this->userRepository->changePassword($userId, $newPassword);
    }
    
    public function fillPayments($model)
    {
        $model->payments = $this->paymentRepository->getAllPayments($model);
    }
    
    public function fillDeliveries($model)
    {
        $model->deliveries = $this->deliveryRepository->getAllDeliveries($model);
    }

    public function fillSelectedPaymentId($model)
    {
        $model->selectedPaymentId = $this->profileRepository->getSelectedPaymentId($model);
    }
    
    public function fillSelectedDeliveryId($model)
    {
        $model->selectedDeliveryId = $this->profileRepository->getSelectedDeliveryId($model);
    }
    
    public function fillAddress($model)
    {
        $model->address = $this->profileRepository->getAddress($model);
    }
    
    public function savePaymentDelivery($paymentId, $deliveryId, $address)
    {
        $this->profileRepository->savePaymentDelivery($paymentId, $deliveryId, $address);
    }

    public function addToWishList($wishListId, $productId, $sizeId)
    {
        $this->wishListProductRepository->addToWishList($wishListId, $productId, $sizeId);
    }

    public function deleteFromWishList($wishListProductId)
    {
        $this->wishListProductRepository->deleteFromWishList($wishListProductId);
    }

    public function getWishListItems($wishListId, $language, $userTypeId)
    {
        $wishListProducts = $this->wishListProductRepository->getWishListProducts($wishListId);

        $productIds = [];

        $wishListItems = [];

        $newWishListItems = [];
        
        foreach ($wishListProducts as $wishListProduct)
        {
            $productIds[] = $wishListProduct->product_id;
            $wishListItems[] = [
                'productId' => $wishListProduct->product_id,
                'sizeId' => $wishListProduct->size_id,
                'wishListProductId' => $wishListProduct->id
            ];
        }

        $products = $this->productRepository->getWishListProducts($productIds, $language, $userTypeId);

        foreach ($wishListItems as $wishListItem)
        {
            foreach ($products as $product)
            {
                if ($wishListItem['productId'] == $product->id)
                {
                    $newWishListItems[] = [
                        'wishListProductId' => $wishListItem['wishListProductId'],
                        'productId' => $wishListItem['productId'],
                        'sizeId' => $wishListItem['sizeId'],
                        'product' => $product
                    ];
                    $wishListItem['product'] = $product;
                }
            }
        }

        \Debugbar::info($wishListItems, $products, $newWishListItems);
        
        return $newWishListItems;
    }
    
    public function getTotalWishListCount($wishListItems)
    {
        return count($wishListItems);
    }

    public function getOrders($model)
    {
        $model->orders = $this->orderRepository->getOrders($model);
    }

    public function getOrdersItems($model)
    {
        $orders = $model->orders;

        foreach ($orders as $order)
        {
            $productIds = [];

            $orderItems = [];

            $newOrderItems = [];

            $orderProducts = $this->orderProductRepository->getOrderProducts($order->id);

            foreach ($orderProducts as $orderProduct)
            {
                $productIds[] = $orderProduct->product_id;
                $orderItems[] = [
                    'productId' => $orderProduct->product_id,
                    'sizeId' => $orderProduct->size_id,
                    'productCount' => $orderProduct->product_count,
                    'price' => $orderProduct->price
//                    'orderProductId' => $wishListProduct->id
                ];
            }

            $products = $this->productRepository->getOrdersProducts($productIds, $model->language, $model->user->user_type_id);

            foreach ($orderItems as $orderItem)
            {
                foreach ($products as $product)
                {
                    if ($orderItem['productId'] == $product->id)
                    {
                        $newOrderItems[] = [
//                            'wishListProductId' => $wishListItem['wishListProductId'],
                            'productId' => $orderItem['productId'],
                            'sizeId' => $orderItem['sizeId'],
                            'productCount' => $orderItem['productCount'],
                            'price' => $orderItem['price'],
                            'product' => $product
                        ];
                        $orderItem['product'] = $product;
                    }
                }
            }

            $order->orderItems = $newOrderItems;
            
//            \Debugbar::info($productIds, $newOrderItems);

        }
    }

    public function getTotalOrdersCount($model)
    {
        $model->totalOrdersCount = $this->orderRepository->getTotalOrdersCount($model);
    }
}